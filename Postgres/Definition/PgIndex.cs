using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using dpOra2Pg;

namespace dpOra2Pg
{

    public class PGIndexes
    {
        private readonly List<PGIndex> _indexes;
        private readonly string _schema;
        private readonly string _tableName;
        private readonly string _constraintSuffix;

        public PGIndexes(string tableName, string schema, List<OraIndex> indexes, List<OraIndexColumn> indexColumns, List<OraConstraint> constraints, string constraintSuffix)
        {
            _indexes = new List<PGIndex>();
            _schema = schema;
            _tableName = tableName;
            _constraintSuffix = constraintSuffix;

            foreach (OraIndex oraIndex in indexes)
            {
                // Do not add autogenerated indexes for PK
                if (constraints.Exists(x => x.ConstraintType == OraConstraintType.PrimaryKey && x.ConstraintName.Equals(oraIndex.IndexName)))
                    continue;
  
                if (!oraIndex.Owner.Equals(_schema, StringComparison.InvariantCultureIgnoreCase))
                    continue;

                PGIndex index = new PGIndex(oraIndex, indexColumns);

                // Rename autogenerated indexes for UQ
                OraConstraint uqIndex = constraints.FirstOrDefault(x => x.ConstraintType == OraConstraintType.UniqueKey && x.ConstraintName.Equals(oraIndex.IndexName));
                if (uqIndex != null)
                    index.Name += "_uk_autogen";

                if (index.Columns.Any())
                    _indexes.Add(index);
            }
		}

        #region DDL
        public string DDL()
        {
            StringBuilder sbIndexes = new StringBuilder();
            foreach (PGIndex index in _indexes)
            {
                string unique = index.IsUnique ? "UNIQUE" : null;
                sbIndexes.AppendLine($"CREATE {unique} INDEX {index.Name}{_constraintSuffix}");
                sbIndexes.AppendLine($"ON {_schema}.{_tableName} USING btree");
                sbIndexes.Append("(");

                StringBuilder sbColumns = new StringBuilder();
                foreach (PgIndexColumn column in index.Columns.OrderBy(x => x.ColumnIndex))
                    sbColumns.Append($"{column.ColumnName} {column.SortOrder} NULLS LAST,");

                sbIndexes.Append(sbColumns.ToString().Trim(','));
                sbIndexes.Append(") ");
                sbIndexes.AppendLine("TABLESPACE pg_default;");
            }

            return sbIndexes.ToString();

        }
        #endregion
    }

    [DebuggerDisplay("{Name}; Columns: {Columns.Count}; IsUnique: {IsUnique}")]
	public class PGIndex
	{
		public string Name { get; set; }
		public readonly List<PgIndexColumn> Columns;
		public bool IsUnique { get; set; }

		private PGIndex()
		{
			Columns = new List<PgIndexColumn>();
		}

		public PGIndex(OraIndex oraIndex, List<OraIndexColumn> oraIndexColumns) : this()
		{
			Name = oraIndex.IndexName.ToLower();
			IsUnique = oraIndex.Uniqueness.Equals("UNIQUE", StringComparison.InvariantCultureIgnoreCase);

			List<OraIndexColumn> oraColumnIndexes = oraIndexColumns
				.Where(x => x.IndexName.Equals(oraIndex.IndexName, StringComparison.InvariantCultureIgnoreCase))
					.OrderBy(x => x.ColumnPosition).ToList();

         
            foreach (OraIndexColumn index in oraColumnIndexes)
            {
                // TODO Indexes with functions (ALL_IND_EXPRESSIONS)
                if (index.ColumnName.StartsWith("SYS_NC", StringComparison.InvariantCultureIgnoreCase) && index.ColumnName.EndsWith("$"))
                    continue;

                Columns.Add(new PgIndexColumn(index));
            }
            
		}
	}
}

[DebuggerDisplay("{ColumnName}; {ColumnIndex}: {SortOrder}")]
public class PgIndexColumn
{
	public string ColumnName { get; set; }
	public int ColumnIndex { get; set; }
	public string SortOrder { get; set; }

	public PgIndexColumn(OraIndexColumn oraIndexColumn)
	{
		ColumnName = oraIndexColumn.ColumnName.ToLower();
		ColumnIndex = oraIndexColumn.ColumnPosition;
		SortOrder = oraIndexColumn.Descend;
	}
}
